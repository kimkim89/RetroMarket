<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.AdminOrder">

	<select id="selectAdminOrderList" resultType="map" parameterType="map">
			select * 
			from product_order as t1
			inner join order_status_info as t2
			on t1.order_status = t2.order_status_code
		<if test="searchField != '' ">
			where ${searchField} like concat('%', #{keyword}, '%')
		</if>
			order by order_idx desc
			limit #{pageFirst}, #{pageSize};
	</select>

	<select id="countOrderList" resultType="int">
			select count(*) 
			from product_order
		<if test="searchField != '' "	>
			where ${searchField} like concat('%', #{keyword}, '%');
		</if>
	</select>

	<!-- 주문별 정보 조회 -->
	<select id="selectEachOrderList" parameterType="int" resultType="map">
		select * 
		from product_order as a left join bank_name_info as b
		on a.od_bank_code = b.bank_code 
		inner join order_status_info as c
		on a.order_status = c.order_status_code
		where a.order_idx = #{orderIdx};
	</select>
	
	<!-- 주문한 상품 조회 -->
	<select id="selectOrderedProd" parameterType="String" resultType="map" >
		select * 
		from product_order as a left join cart as b 
		on a.order_code = b.order_num 
		where a.order_code = #{orderCode}
		order by a.order_idx desc;
	</select>

	<!-- 주문 상태 종류 조회 -->
	<select id="selectOrderStatInfo" resultType="orderStatusVO">
		select * from order_status_info;
	</select>

	<!-- 주문 내역 update -->
	<update id="updateOrderInfo" parameterType="csOrderVO">
		update product_order
		set order_name = #{order_name},
			order_phone = #{order_phone},
			order_addr1 = #{order_addr1},
			order_addr2 = #{order_addr2},
			order_addr3 = #{order_addr3},
			receiver_name = #{receiver_name},
			receiver_phone = #{receiver_phone},
			receiver_addr1 = #{receiver_addr1},
			receiver_addr2 = #{receiver_addr2},
			receiver_addr3 = #{receiver_addr3},
			delivery_msg = #{delivery_msg},
			bank_acct_owner = #{bank_acct_owner},
			od_bank_code = #{od_bank_code},
			bank_acct_num = #{bank_acct_num},
			paid_price = #{paid_price},
			paid_date = #{paid_date},
			added_point = #{added_point},
			refund_price = #{refund_price},
			delivery_company = #{delivery_company},
			tracking_number = #{tracking_number},
			delivery_start_date = #{delivery_start_date},
			order_status = #{order_status}			 
		where order_idx = #{order_idx};
	</update>

	
	<!-- 배송완료시 포인트 테이블에 해당 포인트 관련 데이터 저장 -->
	<insert id="insertPointInfo" parameterType="pointVO">
		insert into member_point (  mp_idx,
									id,
									mp_point,
									mp_point_type,
									mp_content,
									mp_detail,
									mp_option,
									mp_previous_point,
									check_point
								 )
						  values ( #{mp_idx},
								   #{id},
								   #{mp_point},
								   #{mp_point_type},
								   #{mp_content},
								   #{mp_detail},
								   #{mp_option},
								   #{mp_previous_point},
								   #{check_point}			 
							     );		
	</insert>
	
	
	<!-- 배송완료 상태로 변경할 경우, member테이블에 누적 적립금 저장되도록 update -->
	<update id="updateTotalMemberPoint" parameterType="map">
		update member 
		set point = #{memberPoint}
		where id = #{userId};
	</update>
	
	
	<!-- ID와 주문번호로 포인트 내역 조회 -->
	<select id="selectOnePointList" parameterType="String" resultType="pointVO">
		select * 
			from member_point 
			where id = #{userId} 
			and mp_option = #{orderNumber}
			and check_point = #{checkPoint};
	</select>
	
	<!-- 회원(member)테이블에 point컬럼 값 업데이트 -->
	<update id="updateMemberPoint" parameterType="map">
		update member set point = #{totalPoint} where id = #{memberId};
	</update>	
	
</mapper>